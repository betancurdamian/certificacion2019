/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.betancur.view;

import com.betancur.Categoria;
import com.betancur.view.resources.TablaAspirantesModel;
import com.betancur.view.resources.TablaCategoriaModel;
import com.betancur.view.resources.TablaDisciplinasModel;
import com.betancur.view.resources.TablaEscuelasModel;
import com.betancur.view.resources.TablaEscuelasModelListener;
import com.betancur.vo.AspiranteVO;
import com.betancur.Escuela;
import com.betancur.Torneo;
import com.betancur.controller.GestorDeInscripcion;
import com.betancur.view.resources.ResaltadorDeTabla;
import com.betancur.view.resources.TablaAspirantesModelListener;
import com.betancur.view.resources.TablaCategoriaModelListener;
import com.betancur.vo.DisciplinaVO;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Ariel
 */
public class UIRegistrarAspirante extends javax.swing.JFrame {

    private final GestorDeInscripcion controlador;

    //aspirantes con lista de competencias seleccionadas
    private final List<AspiranteVO> aspirantes;
    private Torneo torneoActual;
    private int registrosTotalesDeAspirantes;
    private int registroActualDeAspirante;

    private int registrosTotalesDeDisciplinas;
    private int registroActualDeDisciplina;

    private int registroActualDeCategoria;

    private AspiranteVO aspiranteSeleccionadoVO;
    private DisciplinaVO disciplinaSeleccionadaVO;
    private Categoria categoriaSeleccionada;

    private final TablaEscuelasModel tablaEscuelasModel;
    private final TablaAspirantesModel tablaAspirantesModel;
    private final TablaDisciplinasModel tablaDisciplinasModel;
    private final TablaCategoriaModel tablaCategoriasModel;

    /**
     * Creates new form UIRegistrarAspirante
     *
     * @param controlador
     * @param torneo
     */
    public UIRegistrarAspirante(GestorDeInscripcion controlador, Torneo torneo) {
        this.controlador = controlador;
        this.aspirantes = new ArrayList<>();
        this.torneoActual = torneo;

        this.setResizable(false);

        //Crea los modelos de las tablas
        //cada tabla tiene el model asociado en Desing
        this.tablaEscuelasModel = new TablaEscuelasModel();

        this.tablaAspirantesModel = new TablaAspirantesModel();

        this.tablaDisciplinasModel = new TablaDisciplinasModel(this);

        this.tablaCategoriasModel = new TablaCategoriaModel();

        initComponents();

        jbtn_confirmarCategoriaDisciplina.setEnabled(false);

        jbtn_confirmarDisciplinas.setEnabled(false);

        //agrega escuchadores de las tablas
        tablaEscuelas.getSelectionModel().addListSelectionListener(new TablaEscuelasModelListener(this));

        tablaDisciplinasModel.visualizar(getTablaDisciplinas());

        //agrega escuchadores de las tabla Aspirante
        tablaAspirantes.getSelectionModel().addListSelectionListener(new TablaAspirantesModelListener(this));

        //agrega escuchadores de las tabla Categoria
        tablaCategorias.getSelectionModel().addListSelectionListener(new TablaCategoriaModelListener(this));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEscuelas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEscuelas = new javax.swing.JTable();
        panelAspirantes = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAspirantes = new javax.swing.JTable();
        jbtn_nuevoAspirante = new javax.swing.JButton();
        panelCompetencias = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaDisciplinas = new javax.swing.JTable();
        jbtn_confirmarDisciplinas = new javax.swing.JButton();
        panelCategorias = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaCategorias = new javax.swing.JTable();
        jbtn_confirmarCategoriaDisciplina = new javax.swing.JButton();
        jbtn_Aceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registrar Aspirantes");

        panelEscuelas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Seleccione una Entidad Educativa...", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tablaEscuelas.setModel(tablaEscuelasModel);
        tablaEscuelas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tablaEscuelas);

        javax.swing.GroupLayout panelEscuelasLayout = new javax.swing.GroupLayout(panelEscuelas);
        panelEscuelas.setLayout(panelEscuelasLayout);
        panelEscuelasLayout.setHorizontalGroup(
            panelEscuelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEscuelasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelEscuelasLayout.setVerticalGroup(
            panelEscuelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEscuelasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelAspirantes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aspirantes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tablaAspirantes.setModel(tablaAspirantesModel);
        tablaAspirantes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tablaAspirantes);

        jbtn_nuevoAspirante.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbtn_nuevoAspirante.setText("Nuevo Aspirante");
        jbtn_nuevoAspirante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_nuevoAspiranteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAspirantesLayout = new javax.swing.GroupLayout(panelAspirantes);
        panelAspirantes.setLayout(panelAspirantesLayout);
        panelAspirantesLayout.setHorizontalGroup(
            panelAspirantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAspirantesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAspirantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAspirantesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtn_nuevoAspirante)))
                .addContainerGap())
        );
        panelAspirantesLayout.setVerticalGroup(
            panelAspirantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAspirantesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtn_nuevoAspirante, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        panelCompetencias.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Competencias", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tablaDisciplinas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaDisciplinas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(tablaDisciplinas);

        jbtn_confirmarDisciplinas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbtn_confirmarDisciplinas.setText("Confirmar Disciplinas");
        jbtn_confirmarDisciplinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_confirmarDisciplinasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCompetenciasLayout = new javax.swing.GroupLayout(panelCompetencias);
        panelCompetencias.setLayout(panelCompetenciasLayout);
        panelCompetenciasLayout.setHorizontalGroup(
            panelCompetenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCompetenciasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCompetenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(jbtn_confirmarDisciplinas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelCompetenciasLayout.setVerticalGroup(
            panelCompetenciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCompetenciasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtn_confirmarDisciplinas))
        );

        panelCategorias.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Categorias", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tablaCategorias.setModel(tablaCategoriasModel);
        tablaCategorias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(tablaCategorias);

        jbtn_confirmarCategoriaDisciplina.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbtn_confirmarCategoriaDisciplina.setText("Confirmar Categoria");
        jbtn_confirmarCategoriaDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_confirmarCategoriaDisciplinaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCategoriasLayout = new javax.swing.GroupLayout(panelCategorias);
        panelCategorias.setLayout(panelCategoriasLayout);
        panelCategoriasLayout.setHorizontalGroup(
            panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(jbtn_confirmarCategoriaDisciplina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelCategoriasLayout.setVerticalGroup(
            panelCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtn_confirmarCategoriaDisciplina)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbtn_Aceptar.setText("Aceptar");
        jbtn_Aceptar.setEnabled(false);
        jbtn_Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_AceptarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelEscuelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelAspirantes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtn_Aceptar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelCompetencias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelCategorias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelEscuelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelCompetencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelAspirantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt
     */
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     *
     * @param evt
     */
    private void jbtn_nuevoAspiranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_nuevoAspiranteActionPerformed

        if (!controlador.listarEscuelas().isEmpty()) {
            //carga las escuelas
            this.tablaEscuelasModel.setEscuelas(controlador.listarEscuelas());
            //actualiza el model
            tablaEscuelasModel.fireTableDataChanged();
            this.jbtn_nuevoAspirante.setEnabled(false);
        } else {
            //si no hay escuelas el boton esta habilitado
            this.jbtn_nuevoAspirante.setEnabled(true);
        }


    }//GEN-LAST:event_jbtn_nuevoAspiranteActionPerformed

    /**
     *
     * @param evt
     */
    private void jbtn_AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_AceptarActionPerformed

        //1- Recorrer cada aspiranteVO, verificando si tiene disciplinas cargadas
        //2-Si tiene disciplina cargada marcar como completo en AspiranteVO
        for (AspiranteVO aspirante : aspirantes) {
            aspirante.verificarDisciplinasActivas();
        }

        //1-Recorrer cada aspiranteVO, verificando si esta completo
        for (AspiranteVO aspirante : aspirantes) {
            if (!aspirante.isCompleto()) {//2-NO!!! esta completo llamar al metodo validarDisciplinasVacias(aspiranteActualVO)-->
                validarDisciplinasVacias(aspirante);
            }
        }

        //3-SI!!! esta completo, llamar al metodo guardarCompetencias()
        this.controlador.guardarInscipcion(aspirantes);

        /**
         * Vuelve a iniciar
         */
        this.dispose();
        this.controlador.run();


    }//GEN-LAST:event_jbtn_AceptarActionPerformed

    /**
     *
     * @param evt
     */
    private void jbtn_confirmarDisciplinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_confirmarDisciplinasActionPerformed
        if (!aspiranteSeleccionadoVO.isCompleto()) {

            int proximoAspirante = 0;

            getTablaDisciplinas().setEnabled(false);
            getJbtn_confirmarDisciplinas().setEnabled(false);
            //1-actualizar el registro actual
            tablaDisciplinasModel.fireTableDataChanged();

            getAspirantes().get(seleccionarFilaEnTablaAspirante(aspiranteSeleccionadoVO) - 1).setDisciplinas(tablaDisciplinasModel.getDisciplinas());

            proximoAspirante = getRegistroActualDeAspirante() + 1;

            if (proximoAspirante < getRegistrosTotalesDeAspirantes()) {//SI Existe proximo aspirante
                //Setea proximo aspirante
                setRegistroActualDeAspirante(proximoAspirante);
                /**
                 * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                 * disciplina--> primer disciplina activa del
                 * aspiranteSeleccionadoVO Tabla Categoria --> de la disciplina
                 * activa, selecciona la categoria
                 */
                seleccionarTablas(getRegistroActualDeAspirante());
                //Recursividad con proximo aspirante
                modificarDisciplinas(getAspiranteSeleccionadoVO());

            } else {//No existe proximo aspirante
                //posicionar 1er registro    
                setRegistroActualDeAspirante(0);
                /**
                 * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                 * disciplina--> primer disciplina activa del
                 * aspiranteSeleccionadoVO Tabla Categoria --> de la disciplina
                 * activa, selecciona la categoria
                 */
                seleccionarTablas(getRegistroActualDeAspirante());
                modificarCategoriasDeDisciplinas(getAspiranteSeleccionadoVO());
            }
        }
    }//GEN-LAST:event_jbtn_confirmarDisciplinasActionPerformed

    /**
     *
     * @param evt
     */
    private void jbtn_confirmarCategoriaDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_confirmarCategoriaDisciplinaActionPerformed
        if (!aspiranteSeleccionadoVO.isCompleto()) {
            int proximoAspirante = 0;
            //seter categoria
            getAspirantes().get(seleccionarFilaEnTablaAspirante(aspiranteSeleccionadoVO) - 1).getDisciplinas().get(getRegistroActualDeDisciplina()).setCategoria(getCategoriaSeleccionada());

            this.tablaCategorias.setEnabled(false);
            this.jbtn_confirmarCategoriaDisciplina.setEnabled(false);

            //proxima disciplinaas
            int proximaDisciplina = obtenerProximaDisciplinaActiva(aspiranteSeleccionadoVO, disciplinaSeleccionadaVO);

            if (proximaDisciplina > 0) {//SI existe proxima Disciplina
                //proxima disciplina activa del aspirante actual
                setRegistroActualDeDisciplina(proximaDisciplina);
                setDisciplinaSeleccionadaVO(getAspirantes().get(seleccionarFilaEnTablaAspirante(aspiranteSeleccionadoVO) - 1).getDisciplinas().get(proximaDisciplina));

                //categoria de la proxima disciplina
                setCategoriaSeleccionada(getAspirantes().get(seleccionarFilaEnTablaAspirante(aspiranteSeleccionadoVO) - 1).getDisciplinas().get(proximaDisciplina).getCategoria());

                modificarCategoriasDeDisciplinas(this.getAspiranteSeleccionadoVO());

            } else {//NO existe proxima Disciplina
                //1-pasa al siguiente aspirante
                //2-posiciona primera disciplina activa
                //3-llama al metodo

                proximoAspirante = getRegistroActualDeAspirante() + 1;

                if (proximoAspirante < getRegistrosTotalesDeAspirantes()) {//SI Existe proximo aspirante
                    //Setea proximo aspirante
                    setRegistroActualDeAspirante(proximoAspirante);
                    /**
                     * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                     * disciplina--> primer disciplina activa del
                     * aspiranteSeleccionadoVO Tabla Categoria --> de la
                     * disciplina activa, selecciona la categoria
                     */
                    seleccionarTablas(getRegistroActualDeAspirante());
                    //Recursividad con proximo aspirante
                    modificarCategoriasDeDisciplinas(getAspiranteSeleccionadoVO());

                } else {//No existe proximo aspirante
                    //posicionar 1er registro    
                    /**
                     * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                     * disciplina--> primer disciplina activa del
                     * aspiranteSeleccionadoVO Tabla Categoria --> de la
                     * disciplina activa, selecciona la categoria
                     */

                    //seleccionarTablas(getRegistroActualDeAspirante());
                    //llama a la validacion
                    this.jbtn_Aceptar.setEnabled(true);
                }

            }

        }
    }//GEN-LAST:event_jbtn_confirmarCategoriaDisciplinaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbtn_Aceptar;
    private javax.swing.JButton jbtn_confirmarCategoriaDisciplina;
    private javax.swing.JButton jbtn_confirmarDisciplinas;
    private javax.swing.JButton jbtn_nuevoAspirante;
    private javax.swing.JPanel panelAspirantes;
    private javax.swing.JPanel panelCategorias;
    private javax.swing.JPanel panelCompetencias;
    private javax.swing.JPanel panelEscuelas;
    private javax.swing.JTable tablaAspirantes;
    private javax.swing.JTable tablaCategorias;
    private javax.swing.JTable tablaDisciplinas;
    private javax.swing.JTable tablaEscuelas;
    // End of variables declaration//GEN-END:variables


    /*
     *--------------------------------------------------------------------------
     *Setters y Getters Componentes
     *--------------------------------------------------------------------------
     */
    public javax.swing.JButton getBtnAceptar() {
        return jbtn_Aceptar;
    }

    public javax.swing.JButton getBtnCancelar() {
        return btnCancelar;
    }

    public javax.swing.JButton getJbtn_confirmarCategoriaDisciplina() {
        return jbtn_confirmarCategoriaDisciplina;
    }

    public javax.swing.JButton getJbtn_confirmarDisciplinas() {
        return jbtn_confirmarDisciplinas;
    }

    public javax.swing.JButton getJbtn_nuevoAspirante() {
        return jbtn_nuevoAspirante;
    }

    public javax.swing.JTable getTablaAspirantes() {
        return tablaAspirantes;
    }

    public void setTablaAspirantes(javax.swing.JTable tablaAspirantes) {
        this.tablaAspirantes = tablaAspirantes;
    }

    public javax.swing.JTable getTablaCategorias() {
        return tablaCategorias;
    }

    public void setTablaCategorias(javax.swing.JTable tablaCategorias) {
        this.tablaCategorias = tablaCategorias;
    }

    public JTable getTablaDisciplinas() {
        return tablaDisciplinas;
    }

    public javax.swing.JTable getTablaEscuelas() {
        return tablaEscuelas;
    }

    /*
     *--------------------------------------------------------------------------
     *Setters y Getters Variables
     *--------------------------------------------------------------------------
     */
    public GestorDeInscripcion getControlador() {
        return controlador;
    }

    public List<AspiranteVO> getAspirantes() {
        return aspirantes;
    }

    public Torneo getTorneoActual() {
        return torneoActual;
    }

    public void setTorneoActual(Torneo torneoActual) {
        this.torneoActual = torneoActual;
    }

    public int getRegistrosTotalesDeAspirantes() {
        return registrosTotalesDeAspirantes;
    }

    public void setRegistrosTotalesDeAspirantes(int registrosTotalesDeAspirantes) {
        this.registrosTotalesDeAspirantes = registrosTotalesDeAspirantes;
    }

    public int getRegistroActualDeAspirante() {
        return registroActualDeAspirante;
    }

    public void setRegistroActualDeAspirante(int registroActualDeAspirante) {
        this.registroActualDeAspirante = registroActualDeAspirante;
    }

    public int getRegistrosTotalesDeDisciplinas() {
        return registrosTotalesDeDisciplinas;
    }

    public void setRegistrosTotalesDeDisciplinas(int registrosTotalesDeDisciplinas) {
        this.registrosTotalesDeDisciplinas = registrosTotalesDeDisciplinas;
    }

    public int getRegistroActualDeDisciplina() {
        return registroActualDeDisciplina;
    }

    public void setRegistroActualDeDisciplina(int registroActualDeDisciplina) {
        this.registroActualDeDisciplina = registroActualDeDisciplina;
    }

    public int getRegistroActualDeCategoria() {
        return registroActualDeCategoria;
    }

    public void setRegistroActualDeCategoria(int registroActualDeCategoria) {
        this.registroActualDeCategoria = registroActualDeCategoria;
    }

    public AspiranteVO getAspiranteSeleccionadoVO() {
        return aspiranteSeleccionadoVO;
    }

    public void setAspiranteSeleccionadoVO(AspiranteVO aspiranteSeleccionadoVO) {
        this.aspiranteSeleccionadoVO = aspiranteSeleccionadoVO;
    }

    public DisciplinaVO getDisciplinaSeleccionadaVO() {
        return disciplinaSeleccionadaVO;
    }

    public void setDisciplinaSeleccionadaVO(DisciplinaVO disciplinaSeleccionadaVO) {
        this.disciplinaSeleccionadaVO = disciplinaSeleccionadaVO;
    }

    public Categoria getCategoriaSeleccionada() {
        return categoriaSeleccionada;
    }

    public void setCategoriaSeleccionada(Categoria categoriaSeleccionada) {
        this.categoriaSeleccionada = categoriaSeleccionada;
    }

    public TablaEscuelasModel getTablaEscuelasModel() {
        return tablaEscuelasModel;
    }

    public TablaAspirantesModel getTablaAspirantesModel() {
        return tablaAspirantesModel;
    }

    public TablaDisciplinasModel getTablaDisciplinasModel() {
        return tablaDisciplinasModel;
    }

    public TablaCategoriaModel getTablaCategoriasModel() {
        return tablaCategoriasModel;
    }


    /*
     *--------------------------------------------------------------------------
     *--------------------------------------------------------------------------
     *Metodos Especificos
     *--------------------------------------------------------------------------
     */
 /*
     *--------------------------------------------------------------------------
     *-------------------------Tabla Escuela------------------------------------
     *--------------------------------------------------------------------------
     */
    public Escuela seleccionarEscuela() {
        Escuela retorno = null;
        int filaSeleccionada = tablaEscuelas.getSelectedRow();
        // validamos que haya una fila seleccionada
        if (filaSeleccionada >= 0) {
            retorno = tablaEscuelasModel.obtenerEscuelaEn(filaSeleccionada);
        }
        return retorno;
    }

    /*
     *--------------------------------------------------------------------------
     *-------------------------Tabla Aspirante----------------------------------
     *--------------------------------------------------------------------------
     */
    /**
     * Configura la tabla Aspirante, Disciplina y Categoria, segun el aspirante
     * actual seleccionado
     *
     * @param seleccionAspirante
     */
    public void seleccionarTablas(int seleccionAspirante) {
        /**
         * Configuración tabla Aspirantes
         */
        //Selecciona al aspirante segun la posicion de fila ingresada
        setAspiranteSeleccionadoVO(getAspirantes().get(seleccionAspirante));
        //pinta el  aspirante seleccionado
        pintarFilaTablaAspirante(seleccionarFilaEnTablaAspirante(getAspiranteSeleccionadoVO()) - 1);
        //Actualiza la tabla Aspirante
        getTablaAspirantesModel().fireTableDataChanged();

        /**
         * Configuración de la tabla Disciplinas
         */
        //selecciona la fila correspondiente al nuevo aspirante seleccionado
        this.registroActualDeDisciplina = seleccionarFilaEnTablaDisciplina(getAspiranteSeleccionadoVO());

        if (registroActualDeDisciplina > 0) {
            registroActualDeDisciplina = registroActualDeDisciplina - 1;
            //Settea la Disciplina actual seleccionada 
            setDisciplinaSeleccionadaVO(getTablaDisciplinasModel().obtenerDisciplinaEn(registroActualDeDisciplina));
            //pinta la primera fila de la disciplina seleccionada
            pintarFilaTablaDisciplina(registroActualDeDisciplina);

            /**
             * Configuración de la tabla Categorias
             */
            //agrega todas Categorias 
            getTablaCategoriasModel().setCategorias(getControlador().listarCategorias());
            //Actualiza la tabla Categoria       
            getTablaCategoriasModel().fireTableDataChanged();
            //inhabilita la seleccion de la tabla Categoria
            getTablaCategorias().setEnabled(false);
            //Selecciona la categoria de la primera disciplina seleccionada del aspirante ingresado              
            this.registroActualDeCategoria = seleccionarFilaEnTablaCategoria(getDisciplinaSeleccionadaVO()) - 1;
            //pinta la categoria de la primera disciplina seleccionada del aspirante ingresado 
            pintarFilaTablaCategoria(this.registroActualDeCategoria);
        }
    }

    public void seleccionarTablaAspirante(int seleccionAspirante) {
        /**
         * Configuración tabla Aspirantes
         */
        //Selecciona al aspirante segun la posicion de fila ingresada
        setAspiranteSeleccionadoVO(getAspirantes().get(seleccionAspirante));
        //pinta el  aspirante seleccionado
        pintarFilaTablaAspirante(seleccionarFilaEnTablaAspirante(getAspiranteSeleccionadoVO()) - 1);
        //Actualiza la tabla Aspirante
        getTablaAspirantesModel().fireTableDataChanged();
    }

    public int seleccionarFilaEnTablaAspirante(AspiranteVO aspiranteSeleccionado) {
        int retorno = 0;
        int cantidadRegistro = tablaAspirantes.getRowCount();
        // validamos que hayan registros en la tabla
        if (cantidadRegistro >= 0) {
            retorno = tablaAspirantesModel.obtenerAspiranteEn(aspiranteSeleccionado);
        }
        return retorno;
    }

    public void pintarFilaTablaAspirante(int filaSeleccionada) {
        ResaltadorDeTabla rst = new ResaltadorDeTabla(filaSeleccionada);
        this.tablaAspirantes.setDefaultRenderer(Object.class, rst);
    }

    public void agregarAspiranteATabla(AspiranteVO nuevoAspiranteVO) {
        int primeraDisciplina = 0;
        int categoriaDeDisciplina = 0;

        /**
         * Configuración tabla Aspirantes
         */
        //Agrega el aspirante a la lista de aspirantes a registrar (ValueObject necesarios)
        getAspirantes().add(nuevoAspiranteVO);
        //Seleccionar AspiranteVO actual
        setAspiranteSeleccionadoVO(nuevoAspiranteVO);

        /**
         * Configuración de la tabla Aspirantes
         */
        //agrega a la tabla de aspirante el nuevo aspirante
        getTablaAspirantesModel().setAspirantes(getAspirantes());
        //pinta el nuevo aspirante en la tabla aspirantes
        pintarFilaTablaAspirante(seleccionarFilaEnTablaAspirante(nuevoAspiranteVO) - 1);
        //actualiza el TableModel para que se refresque la tabla
        getTablaAspirantesModel().fireTableDataChanged();
        //inhabilita la seleccion de la tabla aspirante
        getTablaAspirantes().setEnabled(false);

        /**
         * Configuración de la tabla Disciplinas
         */
        //Agrega a la tabla Disciplina, las disciplinas del nuevo aspirante
        getTablaDisciplinasModel().setDisciplinas(nuevoAspiranteVO.getDisciplinas());
        //actualiza el TableModel para que se refresque la tabla     
        getTablaDisciplinasModel().visualizar(getTablaDisciplinas());
        //inhabilita la seleccion de la tabla Disciplina
        getTablaDisciplinas().setEnabled(false);
        //selecciona la primera fila de la disciplina del nuevo aspirante
        primeraDisciplina = seleccionarFilaEnTablaDisciplina(nuevoAspiranteVO) - 1;
        //Agrega la Disciplina Seleccionada  
        setDisciplinaSeleccionadaVO(getTablaDisciplinasModel().obtenerDisciplinaEn(primeraDisciplina));
        //pinta la primera fila seleccionada de la disciplina
        pintarFilaTablaDisciplina(primeraDisciplina);

        /**
         * Configuración de la tabla Categorias
         */
        //agrega a la tabla el Categoria, todas las categorias
        getTablaCategoriasModel().setCategorias(getControlador().listarCategorias());
        //actualiza el model para que se refresque la tabla        
        getTablaCategoriasModel().fireTableDataChanged();
        //inhabilita la seleccion de la tabla Categoria
        getTablaCategorias().setEnabled(false);
        //selecciona la categoria de la primera disciplina del nuevo aspirante                
        categoriaDeDisciplina = seleccionarFilaEnTablaCategoria(getDisciplinaSeleccionadaVO()) - 1;
        //pinta la categoria de la primera disciplina del nuevo aspirante
        pintarFilaTablaCategoria(categoriaDeDisciplina);
    }

    /*
     *--------------------------------------------------------------------------
     *-------------------------Tabla Disciplina---------------------------------
     *--------------------------------------------------------------------------
     */
    public void seleccionarPrimerDisciplinaActivaEnTablaDisciplina(AspiranteVO aspiranteSeleccionado) {
        //selecciona la fila correspondiente al nuevo aspirante seleccionado
        this.registroActualDeDisciplina = getTablaDisciplinasModel().obtenerLaPrimeraDisciplinaActivaEn(aspiranteSeleccionado);
        //Settea la Disciplina actual seleccionada 
        setDisciplinaSeleccionadaVO(getTablaDisciplinasModel().obtenerDisciplinaEn(registroActualDeDisciplina));
        //pinta la primera fila de la disciplina seleccionada
        pintarFilaTablaDisciplina(registroActualDeDisciplina);

    }

    public DisciplinaVO seleccionarDisciplina() {
        DisciplinaVO retorno = null;
        int filaSeleccionada = tablaDisciplinas.getSelectedRow();
        // validamos que haya una fila seleccionada
        if (filaSeleccionada >= 0) {
            retorno = tablaDisciplinasModel.obtenerDisciplinaEn(filaSeleccionada);
        }
        return retorno;

    }

    public DisciplinaVO seleccionarDisciplinaPorFila(int fila) {
        DisciplinaVO retorno = tablaDisciplinasModel.getDisciplinas().get(fila);

        return retorno;

    }

    public int seleccionarFilaEnTablaDisciplina(AspiranteVO aspirante) {
        int retorno = 0;
        int cantidadRegistro = tablaDisciplinas.getRowCount();
        // validamos que hayan registros en la tabla
        if (cantidadRegistro >= 0) {
            //obtiene la primera disciplina activa
            retorno = tablaDisciplinasModel.obtenerLaPrimeraDisciplinaActivaEn(aspirante);
        }
        return retorno;
    }

    public int obtenerFilaDeDisciplina(AspiranteVO aspiranteVOActual, DisciplinaVO disciplinaVoActual) {
        int retorno = tablaDisciplinasModel.obtenerFilaDeDisciplina(aspiranteVOActual, disciplinaSeleccionadaVO);
        return retorno;
    }

    public int obtenerProximaDisciplinaActiva(AspiranteVO aspiranteVOActual, DisciplinaVO disciplinaVoActual) {
        int retorno = tablaDisciplinasModel.obtenerProximaDisciplinaActiva(aspiranteVOActual, disciplinaSeleccionadaVO);
        return retorno;
    }

    public void pintarFilaTablaDisciplina(int filaSeleccionada) {
        ResaltadorDeTabla rst = new ResaltadorDeTabla(filaSeleccionada);
        this.tablaDisciplinas.setDefaultRenderer(Object.class, rst);
    }

    public void modificarDisciplinas(AspiranteVO aspiranteVO) {
        if (!aspiranteVO.isCompleto()) {
            if (getRegistrosTotalesDeAspirantes() > 0) {//SI Hay aspirantes cargados 
                int proximoAspirante = 0;
                getTablaDisciplinas().setEnabled(false);
                getJbtn_confirmarDisciplinas().setEnabled(false);

                if (getRegistroActualDeAspirante() < getRegistrosTotalesDeAspirantes()) {//SI "el registro actual es menor que el registro total"

                    /**
                     * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                     * disciplina--> primer disciplina activa del
                     * aspiranteSeleccionadoVO Tabla Categoria --> de la
                     * disciplina activa, selecciona la categoria
                     */
                    seleccionarTablas(getRegistroActualDeAspirante());

                    int faseModificacionDisciplina = JOptionPane.showConfirmDialog(this, "¿Desea Modificar las Disciplinas por Defecto? \n        del aspirante " + aspiranteVO.getAspirante().getNombres() + " " + aspiranteVO.getAspirante().getApellido(), "Modificar Disciplinas!", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

                    if (faseModificacionDisciplina == 0) {//SI MODIFICA DISCIPLINA --> "Modifica las disciplinas del actual aspirante"
                        getTablaDisciplinas().setEnabled(true);
                        getJbtn_confirmarDisciplinas().setEnabled(true);

                    } else {//NO MODIFICA DISCIPLINA --> "pasa al siguiente aspirante"
                        proximoAspirante = getRegistroActualDeAspirante() + 1;

                        if (proximoAspirante < getRegistrosTotalesDeAspirantes()) {//SI Existe proximo aspirante
                            //Setea proximo aspirante
                            setRegistroActualDeAspirante(proximoAspirante);

                            /**
                             * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                             * disciplina--> primer disciplina activa del
                             * aspiranteSeleccionadoVO Tabla Categoria --> de la
                             * disciplina activa, selecciona la categoria
                             */
                            seleccionarTablas(getRegistroActualDeAspirante());

                            //Recursividad con proximo aspirante
                            modificarDisciplinas(getAspiranteSeleccionadoVO());

                        } else {//No existe proximo aspirante
                            //posicionar 1er registro   

                            //posicionar 1er registro    
                            setRegistroActualDeAspirante(0);

                            /**
                             * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                             * disciplina--> primer disciplina activa del
                             * aspiranteSeleccionadoVO Tabla Categoria --> de la
                             * disciplina activa, selecciona la categoria
                             */
                            seleccionarTablas(getRegistroActualDeAspirante());

                            modificarCategoriasDeDisciplinas(getAspiranteSeleccionadoVO());
                        }

                    }
                } else {//NO "el registro actual es mayor que el registro total"
                }
            } else {//NO Hay aspirantes cargados
            }
        }
    }

    public int calcularRegistrosTotalesDeDisciplinas(List<DisciplinaVO> disciplinas) {
        int cantidadDisciplinasSeleccionadas = 0;
        for (DisciplinaVO disciplina : disciplinas) {
            if (disciplina.getActivo()) {
                cantidadDisciplinasSeleccionadas = cantidadDisciplinasSeleccionadas + 1;
            }
        }

        return cantidadDisciplinasSeleccionadas;
    }

    public void pintarDisciplinaConCategoria(int fila) {

        /**
         * asd Configuración de la tabla Disciplinas
         */
        //Agrega las disciplinas del aspirante seleccionado
        getTablaDisciplinasModel().setDisciplinas(getAspiranteSeleccionadoVO().getDisciplinas());
        //Actualiza la tabla Disciplina   
        getTablaDisciplinasModel().visualizar(getTablaDisciplinas());
        //inhabilita la seleccion de la tabla Disciplina
        getTablaDisciplinas().setEnabled(false);

        //Settea la Disciplina actual seleccionada 
        setDisciplinaSeleccionadaVO(getTablaDisciplinasModel().obtenerDisciplinaEn(registroActualDeDisciplina));
        //pinta la primera fila de la disciplina seleccionada
        pintarFilaTablaDisciplina(registroActualDeDisciplina);

        /**
         * Configuración de la tabla Categorias
         */
        //agrega todas Categorias 
        getTablaCategoriasModel().setCategorias(getControlador().listarCategorias());
        //Actualiza la tabla Categoria       
        getTablaCategoriasModel().fireTableDataChanged();
        //inhabilita la seleccion de la tabla Categoria
        getTablaCategorias().setEnabled(false);
        //Selecciona la categoria de la primera disciplina seleccionada del aspirante ingresado              
        this.registroActualDeCategoria = seleccionarFilaEnTablaCategoria(getDisciplinaSeleccionadaVO()) - 1;
        //pinta la categoria de la primera disciplina seleccionada del aspirante ingresado 
        pintarFilaTablaCategoria(this.registroActualDeCategoria);
    }

    /*
     *--------------------------------------------------------------------------
     *-------------------------Tabla Categoria----------------------------------
     *--------------------------------------------------------------------------
     */
    public Categoria seleccionarCategoria() {
        Categoria retorno = null;
        int filaSeleccionada = tablaCategorias.getSelectedRow();
        // validamos que haya una fila seleccionada
        if (filaSeleccionada >= 0) {
            retorno = tablaCategoriasModel.obtenerCategoriaEn(filaSeleccionada);
        }
        return retorno;
    }

    public void seleccionarCategoriaDeDisciplina(int filaDisciplina) {

        //Setea la Disciplina segun la fila seleccionada 
        setDisciplinaSeleccionadaVO(getTablaDisciplinasModel().obtenerDisciplinaEn(filaDisciplina));
        //pinta la fila seleccionada de la disciplina
        pintarFilaTablaDisciplina(filaDisciplina);
        //Setea la categoria actual de la disciplina seleccionada                
        setRegistroActualDeCategoria(seleccionarFilaEnTablaCategoria(getDisciplinaSeleccionadaVO()) - 1);
        //pinta la categoria actual de la disciplina seleccionada   
        pintarFilaTablaCategoria(getRegistroActualDeCategoria());

    }

    public int seleccionarFilaEnTablaCategoria(DisciplinaVO disciplina) {
        int retorno = 0;
        int cantidadRegistro = tablaCategorias.getRowCount();
        // validamos que hayan registros en la tabla
        if (cantidadRegistro >= 0) {
            //obtiene la primera disciplina activa
            retorno = tablaCategoriasModel.obtenerFilaDeCategoriaDeDisciplinaActiva(disciplina);
        }
        return retorno;
    }

    public void pintarFilaTablaCategoria(int filaSeleccionada) {
        ResaltadorDeTabla rst = new ResaltadorDeTabla(filaSeleccionada);
        this.tablaCategorias.setDefaultRenderer(Object.class, rst);
    }

    //Mofificar Categoria
    public void modificarCategoriasDeDisciplinas(AspiranteVO aspiranteVOActual) {
        if (!aspiranteVOActual.isCompleto()) {
            if (getRegistrosTotalesDeAspirantes() > 0) {//SI --> Existen aspirantes en la lista            
                if (getRegistroActualDeAspirante() < getRegistrosTotalesDeAspirantes()) {//SI--> el aspirante esta dentro de la lista
                    int proximoAspirante = 0;
                    getTablaCategorias().setEnabled(false);
                    getJbtn_confirmarCategoriaDisciplina().setEnabled(false);
                    //obtener la cantidad de disciplinas del aspirante
                    setRegistrosTotalesDeDisciplinas(calcularRegistrosTotalesDeDisciplinas(aspiranteVOActual.getDisciplinas()));

                    if (getRegistrosTotalesDeDisciplinas() > 0) {//SI el aspirante tiene disciplinas activas         
                        if (aspiranteVOActual.getDisciplinas().get(getRegistroActualDeDisciplina()).getActivo()) {//SI --> la disciplina esta activa
                            pintarDisciplinaConCategoria(getRegistroActualDeDisciplina());

                            int faseModificacionCategoria = JOptionPane.showConfirmDialog(this, "¿Desea Modificar la Categoria de la Disciplina? \n " + getDisciplinaSeleccionadaVO().getDisciplina().getNombre() + "\n del aspirante " + getAspiranteSeleccionadoVO().getAspirante().getNombres() + ", " + getAspiranteSeleccionadoVO().getAspirante().getApellido(), "Modificar Categoria!", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

                            if (faseModificacionCategoria == 0) {//SI MODIFICA Categoria --> "Modifica la categoria de la actual disciplina"
                                getTablaCategorias().setEnabled(true);
                                getJbtn_confirmarCategoriaDisciplina().setEnabled(true);

                            } else {//NO MODIFICA Categoria --> "pasa a la siguiente disciplina"
                                //proxima disciplinaas
                                int proximaDisciplina = obtenerProximaDisciplinaActiva(aspiranteSeleccionadoVO, disciplinaSeleccionadaVO);
                                if (proximaDisciplina > 0) {//SI existe proxima Disciplina

                                    //proxima disciplina activa del aspirante actual
                                    setRegistroActualDeDisciplina(proximaDisciplina);
                                    setDisciplinaSeleccionadaVO(getAspirantes().get(seleccionarFilaEnTablaAspirante(aspiranteSeleccionadoVO) - 1).getDisciplinas().get(proximaDisciplina));

                                    //categoria de la proxima disciplina
                                    setCategoriaSeleccionada(getAspirantes().get(seleccionarFilaEnTablaAspirante(aspiranteSeleccionadoVO) - 1).getDisciplinas().get(proximaDisciplina).getCategoria());

                                    modificarCategoriasDeDisciplinas(this.getAspiranteSeleccionadoVO());

                                } else {//NO existe proxima Disciplina
                                    //1-pasa al siguiente aspirante
                                    //2-posiciona primera disciplina activa
                                    //3-llama al metodo

                                    proximoAspirante = getRegistroActualDeAspirante() + 1;

                                    if (proximoAspirante < getRegistrosTotalesDeAspirantes()) {//SI Existe proximo aspirante
                                        //Setea proximo aspirante
                                        setRegistroActualDeAspirante(proximoAspirante);
                                        /**
                                         * Tabla aspirante -->
                                         * aspiranteSeleccionadoVO Tabla
                                         * disciplina--> primer disciplina
                                         * activa del aspiranteSeleccionadoVO
                                         * Tabla Categoria --> de la disciplina
                                         * activa, selecciona la categoria
                                         */
                                        seleccionarTablas(getRegistroActualDeAspirante());
                                        //Recursividad con proximo aspirante
                                        modificarCategoriasDeDisciplinas(getAspiranteSeleccionadoVO());

                                    } else {//No existe proximo aspirante
                                        //posicionar 1er registro    
                                        setRegistroActualDeAspirante(0);
                                        /**
                                         * Tabla aspirante -->
                                         * aspiranteSeleccionadoVO Tabla
                                         * disciplina--> primer disciplina
                                         * activa del aspiranteSeleccionadoVO
                                         * Tabla Categoria --> de la disciplina
                                         * activa, selecciona la categoria
                                         */
                                        seleccionarTablas(getRegistroActualDeAspirante());
                                        //llama a la validacion
                                        this.jbtn_Aceptar.setEnabled(true);
                                    }

                                }

                            }

                        } else {//NO --> la disciplina no esta activa
                        }

                    } else {// el aspirante no tiene seleccionada ninguna disciplina activa
                        //siguiente aspirante
                        proximoAspirante = getRegistroActualDeAspirante() + 1;

                        if (proximoAspirante < getRegistrosTotalesDeAspirantes()) {//SI Existe proximo aspirante
                            //Setea proximo aspirante
                            setRegistroActualDeAspirante(proximoAspirante);

                            /**
                             * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                             * disciplina--> primer disciplina activa del
                             * aspiranteSeleccionadoVO Tabla Categoria --> de la
                             * disciplina activa, selecciona la categoria
                             */
                            seleccionarTablas(getRegistroActualDeAspirante());

                            //Recursividad con proximo aspirante
                            modificarCategoriasDeDisciplinas(getAspiranteSeleccionadoVO());

                        } else {//No existe proximo aspirante

                            //posicionar 1er registro   
                            //posicionar 1er registro    
                            setRegistroActualDeAspirante(0);

                            /**
                             * Tabla aspirante --> aspiranteSeleccionadoVO Tabla
                             * disciplina--> primer disciplina activa del
                             * aspiranteSeleccionadoVO Tabla Categoria --> de la
                             * disciplina activa, selecciona la categoria
                             */
                            seleccionarTablas(getRegistroActualDeAspirante());

                            this.jbtn_Aceptar.setEnabled(true);
                        }
                    }

                    //1- pitar disciplina con su categoria
                    //pintarDisciplinaConCategoria(obtenerFilaDeDisciplina(aspiranteVOActual, disciplinaVOActual));
                    //2-
                } else {//NO--> el aspirante no esta dentro de la lista
                }

            } else {//NO --> No Existen aspirantes en la lista   
            }
        }
    }

    public void validarDisciplinasVacias(AspiranteVO aspiranteActual) {

        seleccionarTablas(tablaAspirantesModel.obtenerAspiranteEn(aspiranteSeleccionadoVO) - 1);

        int faseModificacionCategoria = JOptionPane.showConfirmDialog(this, "Seleccione Disciplinas \n " + "para el aspirante " + aspiranteActual.getAspirante().getNombres() + ", " + aspiranteActual.getAspirante().getApellido(), "Ingresar Disciplinas!", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

        if (faseModificacionCategoria == 0) {//SI MODIFICA Categoria --> "Modifica la categoria de la actual disciplina"
            getTablaDisciplinas().setEnabled(true);
            getJbtn_confirmarDisciplinas().setEnabled(true);

        } else {
            validarDisciplinasVacias(aspiranteActual);
        }
    }
}
